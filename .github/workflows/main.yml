name: Build
on:
  pull_request:
    - main
    - stable
env:
  IMAGE_NAME: fun-tour
  PORT_PROD: 8091
  PORT_STABLE: 8092
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.1.1
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 7
          run_install: false
      - run: |
          pnpm install
          pnpm build
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist
  push:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - if: github.ref_name == 'main' || github.base_ref == 'main'
        run: echo "PRO_ENV=prod" >> $GITHUB_ENV
      - if: github.ref_name == 'stable' || github.base_ref == 'stable'
        run: echo "PRO_ENV=stable" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./dist
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v2
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}_${{ env.PRO_ENV }}
        with:
          context: .
          file: config/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }},${{ env.DOCKER_IMAGE }}:latest
  deploy:
    needs:
      - build
      - push
    runs-on: ubuntu-latest
    steps:
      - if: github.ref_name == 'main' || github.base_ref == 'main'
        run: |
          echo "PRO_PROT=$PORT_PROD" >> $GITHUB_ENV
          echo "PRO_ENV=prod" >> $GITHUB_ENV
      - uses: appleboy/ssh-action@master
        env:
          DOCKER_CONTAINER: ${{ secrets.DOCKERHUB_USERNAME }}_${{ env.IMAGE_NAME }}_${{ env.PRO_ENV }}
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}_${{ env.PRO_ENV }}
        with:
          host: ${{ secrets.REMOTE_HOST }}
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          username: ${{ secrets.REMOTE_USERNAME }}
          script: |
            docker rm -f ${{ env.DOCKER_CONTAINER }}
            docker rmi -f ${{ env.DOCKER_IMAGE }}
            docker pull ${{ env.DOCKER_IMAGE }}
            docker run --name ${{ env.DOCKER_CONTAINER }} -p ${{ env.PRO_PORT }}:80 -dit ${{ env.DOCKER_IMAGE }}
