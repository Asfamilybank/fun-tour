name: FUN TOUR FRONTEND CI
on:
  push:
    branches: 
      - main
      - dev
    paths: 
      - src/**
      - package.json
env:
  # 自定义的镜像基础名称
  IMAGE_NAME: fun-TOUR
jobs:
  test:
    runs_on: unbound-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3.1.1
      with:
        node-version: ${{ matrix.node-version }}
        cache: yarn
    - run: yarn test
    - uses: actions/upload-artifact@v3
      with:
        name: coverage-output
        path: coverage
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: 
        - 16.x
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.1.1
      with:
        node-version: ${{ matrix.node-version }}
        cache: yarn
    - name: Build Front
      run: |
        yarn
        yarn build
  push:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Set env to production
      if: endsWith(github.ref, 'main')
      run: |
        echo "PRO_PORT=8091" >> $GITHUB_ENV
        echo "PRO_ENV=prod" >> $GITHUB_ENV
    - name: Set env to development
      if: endsWith(github.ref, 'dev')
      run: |
        echo "PRO_PROT=8092" >> $GITHUB_ENV
        echo "PRO_ENV=dev" >> $GITHUB_ENV
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: config/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME}}:${{ env.PRO_ENV }}_${{ github.sha }}
  deploy:
    needs:
    - build
    - push
    runs-on: ubuntu-latest
    steps:
    - name: SSH remote
      uses: appleboy/ssh-action@master
      with:
        host: secrets.REMOTE_HOST
        username: secrets.REMOTE_USERNAME
        key: secrets.REMOTE_PRIVATE_KEY
        script: |
          docker rm -f ${{ secrets.DOCKERHUB_USERNAME }}_${{ env.IMAGE_NAME}}_${{ env.PRO_ENV }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME}}:${{ env.PRO_ENV }}_${{ github.sha }}
          docker run --name ${{ secrets.DOCKERHUB_USERNAME }}_${{ env.IMAGE_NAME}}_${{ env.PRO_ENV }} -p ${{ env.PRO_PORT }}:80 -dit ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME}}:${{ env.PRO_ENV }}_${{ github.sha }}